For a functional solution for deployment automation i would probably use Docker, a script could also work
but it might get complicated and I think there are more reasonable solutions than that. Whatever the solution
would be, I would add the following steps to it:
1. Before starting the deployment, the VM would have to be created with disk size of 8 GB and at least one
4.2 GB partition
2. Install necessary packages:				su
							apt-get update -y && apt-get upgrade -y
							apt-get install sudo vim ufw portsentry fail2ban apache2 bsd-mailx postfix -y

3. Configure sudo:					su
							chmod +w /etc/sudoers
							vim sudoers
							add: username ALL=(ALL:ALL) NOPASSWD:ALL

4. Configure static ip:					change NAT to Bridged adapter in the settings of Virtualbox

							sudo vim /etc/network/interfaces
							last row: auto enp0s3

							sudo vim /etc/network/interfaces.d/enp0s3
							iface enp0s3 inet static
								address 10.12.200.239
								netmask 255.255.255.252
								gateway 10.12.254.254

							sudo service networking restart

5. Change SSH default port:				sudo vim /etc/ssh/sshd_config
							edit line # Port 22 -> Port 51918 (choose port between 49152 - 65535)
							sudo service ssh restart

							login: ssh -p 51918 spentti@10.12.200.239

6. Setup SSH acces /w publickeys:			On host machine:
							ssh-keygen -t rsa
							ssh-copy-id -i id_rsa.pub spentti@10.12.200.239 -p 51918

7. Remove root login permit:				sudo vim /etc/ssh/sshd_config
							line 32: PermitRootLogin no
							line 56: PasswordAuthentication no (remove #)

							sudo service sshd restart

8. Setup firewall with ufw:				sudo ufw status
							sudo ufw enable

							list services: less /etc/services

							sudo ufw allow 51918/tcp
							sudo ufw allow 80/tcp
							sudo ufw allow 443
							sudo ufw status

9. Setup DOS protection / fail2ban:			sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local

							sudo vim /etc/fail2ban/jail.local
							[sshd]
							enabled = true
							port    = 42
							logpath = %(sshd_log)s
							backend = %(sshd_backend)s
							maxretry = 3
							bantime = 600

							#Add after HTTP servers:
							[http-get-dos]
							enabled = true
							port = http,https
							filter = http-get-dos
							logpath = /var/log/apache2/access.log (le fichier d'access sur server web)
							maxretry = 300
							findtime = 300
							bantime = 600
							action = iptables[name=HTTP, port=http, protocol=tcp]

							sudo vim /etc/fail2ban/filter.d/http-get-dos.conf
							[Definition]
							failregex = ^<HOST> -.*"(GET|POST).*
							ignoreregex =

							sudo ufw reload
							sudo service fail2ban restart

							check: sudo fail2ban-client status

							sudo apt-get install slowhttptest
							slowhttptest -c 500 -H -g -o ./output_file -i 10 -r 200 -t GET -u http://10.12.20.238 -x 24 -p 2

10. Prot. against open port scans:			sudo vim /etc/default/portsentry
							TCP_MODE="atcp"
							UDP_MODE="audp"

							sudo vim /etc/portsentry/portsentry.conf
							##################
							# Ignore Options #
							##################
							# 0 = Do not block UDP/TCP scans.
							# 1 = Block UDP/TCP scans.
							# 2 = Run external command only (KILL_RUN_CMD)

							BLOCK_UDP="1"
							BLOCK_TCP="1"
							Comment out all lines with KILL_ROUTE, except:
							KILL_ROUTE="/sbin/iptables -I INPUT -s $TARGET$ -j DROP"

									sudo /etc/init.d/portsentry start

11. Stop unneeded services:				sudo service --status-all
							ls /etc/systemd/system/sysinit.target.wants/

							sudo systemctl disable console-setup.service
							sudo systemctl disable keyboard-setup.service
							sudo systemctl disable apparmor.service

12. Script for updating packages:			touch updating.sh
							chmod a+x upadating.sh

							sudo vim updating.sh
							sudo apt-get update -y >> /var/log/updating.log
							sudo apt-get upgrade -y >> /var/log/updating.log

							crontab -e
							SHELL=/bin/bash
							PATH=/sbin:/bin:/usr/sbin:/usr/bin

							@reboot /home/spentti/updating.sh &
									0 4 * * 6 sudo /home/spentti/updating.sh &

13. Monitor crontab changes:				sudo vim monitor_cron.sh
							#!/bin/bash

							FILE="/var/tmp/checksum"
							FILE_TO_WATCH="/var/spool/cron/crontabs/spentti"
							FILE2="/var/tmp/checksum2"
							FILE_TO_WATCH2="/etc/crontab"
							MD5VALUE=$(sudo md5sum $FILE_TO_WATCH)
							MD5VALUE2=$(sudo md5sum $FILE_TO_WATCH2)

							if [ ! -f $FILE ]
							then
								echo "$MD5VALUE" > $FILE
								exit 0;
							fi;

							if [ "$MD5VALUE" != "$(cat $FILE)" ]
							then
								echo "$MD5VALUE" > $FILE
								echo "$FILE_TO_WATCH has been modified!" | mail -s "$FILE_TO_WATCH modified" root
							fi;

							if [ ! -f $FILE2 ]
							then
								echo "$MD5VALUE2" > $FILE2
								exit 0;
							fi;

							if [ "$MD5VALUE2" != "$(cat $FILE2)" ]
							then
								echo "$MD5VALUE2" > $FILE2
								echo "$FILE_TO_WATCH2 has been modified!" | mail -s "$FILE_TO_WATCH2 modified" root
							fi;

							crontab -e
							0 0 * * * sudo /home/spentti/monitor_cron.sh

							sudo chmod 755 monitor_cron.sh
							sudo chmod 755 updating.sh
							sudo chown spentti /var/mail/spentti
									
							sudo apt-get install bsdmailx postfix
							edit /etc/aliases -> root:root
							sudo new aliases

							sudo systemctl enable cron0

14. Deploy web application:				copy web app to /var/www/html/

15. Configure SSL certificates:				sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "/C=FR/ST=IDF/O=42/OU=Project-roger/CN=10.12.200.239" -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt
									
							sudo vim /etc/apache2/conf-available/ssl-params.conf
							SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
							SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
							SSLHonorCipherOrder On

							Header always set X-Frame-Options DENY
							Header always set X-Content-Type-Options nosniff

							SSLCompression of
							SSLUseStapling on
							SSLStaplingCache "shmcb:logs/stapling-cache(150000)"

							SSLSessionTickets Off

							sudo vim /etc/apache2/sites-available/default-ssl.conf
							<IfModule mod_ssl.c>
								<VirtualHost _default_:443>
									ServerAdmin spentti@student.hive.fi
									ServerName	10.12.200.239

									DocumentRoot /var/www/html

									ErrorLog ${APACHE_LOG_DIR}/error.log
									CustomLog ${APACHE_LOG_DIR}/access.log combined

									SSLEngine on

									SSLCertificateFile	/etc/ssl/certs/apache-selfsigned.crt
									SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key

									<FilesMatch "\.(cgi|shtml|phtml|php)$">
											SSLOptions +StdEnvVars
									</FilesMatch>
									<Directory /usr/lib/cgi-bin>
											SSLOptions +StdEnvVars
									</Directory>

								</VirtualHost>
							</IfModule>


							sudo vim /etc/apache2/sites-available/000-default.conf
							<VirtualHost *:80>

								ServerAdmin webmaster@localhost
								DocumentRoot /var/www/html

								Redirect "/" "https://10.12.200.239/"

								ErrorLog ${APACHE_LOG_DIR}/error.log
								CustomLog ${APACHE_LOG_DIR}/access.log combined

							</VirtualHost>v

							sudo a2enmod ssl
							sudo a2enmod headers
							sudo a2ensite default-ssl
							sudo a2enconf ssl-params
							moisystemctl reload apache2
